C#
(*) How does C# code runs ?
- .NET provides runtime environment called Common Runtime Language (CLR) which runs the code.
- Code that targets the CLR run time is called managed code.
- The typesystem, metadata and, runtime are defined by ECMA Common Language Infrastructure Specification. (https://www.ecma-international.org/wp-content/uploads/ECMA-335_6th_edition_june_2012.pdf)
- Language compiler => code + metadata (CLR portable executable [PE] file)
- Metadata is used to:
	- locate and load classes
	- resove method invocations
	- enforce security, etc
- Managed data: object reference management and release unused references are managed by runtime.
- Garbage collection.
- Managed code can use both managed or un-managed data.
- Common Type system defined by the runtime enables designing objects written in different languages to interact with each other.
- .NET framework version might not correspond to the version of CLR it uses.

** https://learn.microsoft.com/en-us/dotnet/standard/clr

(*) What is the entire process of executing the C# code ?
- .NET provides a runtime environment called Common Runtime Language (CLR) which runs the code.
- The code that targets the CLR runtime is called managed code.
- CLR is a multilanguage execution environment.
- Steps:
	- Choose a language compiler that target the runtime. 
		- If your component should be useable by components written in other langauges then that component must only expose features that are included in Common Language Specification (CLS).

	- Compiler produces => Common Intermediate language (CIL) and Metadata
		- CIL is CPU independent set of instructions that can be efficiently converted to native code.
		- CIL can be JIT compiled and run on any supported architecture.
		- Metadata includes information that is used by runtime while code exection.
		- CIL + metadata => Microsoft portable executable (PE) file.
		- Because of metadata there is no need of type libraries or Interface definition language (IDL)
	- Just In time compiles CIL to native code amidst verification for type safety.
		- JIT compiler: The loader creates and attaches a stub to each method in a type when the type is loaded and initialized. When a method is called for the first time, the stub passes control to the JIT compiler, which converts the CIL for that method into native code and modifies the stub to point directly to the generated native code. Therefore, subsequent calls to the JIT-compiled method go directly to the native code.

		- NGen.exe compiler: 
	- Code executes on the native architecture with the help of services provided by Runtime.


